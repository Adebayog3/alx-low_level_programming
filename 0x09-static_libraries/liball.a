!<arch>
0-isupper.c/    0           0     0     644     182       `
#include "main.h"

/**
 *_isupper- uppercase letters
 *@c: char to check
 *
 *Return: 0 or 1
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     245       `
#include <string.h>
#include "main.h"

/**
* _memset - Fills memory with a constant byte
* @s: char
* @b: char
* @n: int
*
* Return: a pointer to the memory s
*/

char *_memset(char *s, char b, unsigned int n)
{
	memset(s, b, n);
	return (s);
}

0-putchar.c/    0           0     0     644     239       `
#include <unistd.h>

/**
 *_putchar- write the character c to stdout
 *@c: The character to print
 *
 *Return: on sucess 1
 *On error, -1 is returned, and error is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

0-strcat.c/     0           0     0     644     327       `
#include "main.h"

/**
*_strcat - concatenates two strings
*@dest: input value
*@src: input value
*
*Return: void
*/
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';
	return (dest);
}

1-isdigit.c/    0           0     0     644     189       `
#include "main.h"
/**
*_isdigit - checks for a digit (0 through 9)
*@c: int to be checked
*Return: 1 if c is a digit, 0 otherwise
*/
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     350       `
#include "main.h"
/**
*_memcpy - a function that copies memory area
*@dest: memory where is stored
*@src: memory where is copied
*@n: number of bytes
*
*Return: copied memory with n byted changed
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     392       `
#include "main.h"
/**
*_strncat - concatenate two strings
* using at most n bytes from src
*@dest: input value
*@src: input value
*@n: input value
*
*Return: dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     384       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - converts a string to an integer
 *
 * @s: string input parameter
 *
 * Return: converted integer from string
*/

int _atoi(char *s)
{
unsigned int num = 0;
int sign = 1;

do {
if (*s == '-')
sign *= -1;
else if (*s >= '0' && *s <= '9')
num = (num * 10) + (*s - '0');
else if (num > 0)
break;
} while (*s++);

return (num *sign);
}
2-strchr.c/     0           0     0     644     270       `
#include "main.h"
/**
* _strcat - concatenates two strings
*@dest: input value
*@src: input value
*
*Return: void
*/

char *_strcat(char *dest, char *src)
{
	char *p = dest;

	while (*p)
	{
		p++;
	}
	while (*src)
	{
		*p++ = *src++;
	}

	*p = '\0';

	return (dest);
}

2-strlen.c/     0           0     0     644     185       `
#include "main.h"
/**
* _strlen - return the length of a string
*@s: string
*Return: length
*/
int _strlen(char *s)
{
	int len = 0;

	while (*s)
	{
		len++;
		s++;
	}
	return (len);
}


2-strncpy.c/    0           0     0     644     265       `
#include "main.h"
/**
*_strncpy - copy a string
*@dest: input value
*@src: input value
*@n: input value
*
*Return: dest
*/
char *_strncpy(char *dest, char *src, int n)
{
	char *p = dest;

	while (n-- && *src)
	{
		*p++ = *src++;
	}

	*p = '\0';

	return (dest);
}


3-islower.c/    0           0     0     644     196       `
#include "main.h"
/**
*_islower - checks for lowercase character
*@c: the character to check
*Return: 1 if c is lowercase. 0 otherwise
*/
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}


3-puts.c/       0           0     0     644     224       `
#include "main.h"

/**
* _puts - prints a string with new line
* @str: the string to print
* Return: string
*/
void _puts(char *str)
{
int i;

for (i = 0; *(str + i) != '\0'; i++)
{
_putchar(*(str + i));
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     334       `
#include "main.h"
/**
*_strcmp - compare string values
*@s1: input value
*@s2: input value
*
*Return: s1[i] - s2[i]
*/
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	if (*s1 == '\0' && *s2 == '\0')
	{
		return (0);
	}
	else if (*s1 < *s2)
	{
		return (-1);
	}
	else
	{
		return (1);
	}
}

3-strspn.c/     0           0     0     644     245       `
#include <string.h>
#include "main.h"

/**
* _memset - Fills memory with a constant byte
* @s: char
* @b: char
* @n: int
*
* Return: a pointer to the memory s
*/

char *_memset(char *s, char b, unsigned int n)
{
	memset(s, b, n);
	return (s);
}

4-strpbrk.c/    0           0     0     644     288       `
#include "main.h"
#include <stddef.h>

/**
*_strpbrk - Entry point
*@s: input
*@accept: input
*Return: always 0 (success)
*/
char *_strpbrk(char *s, char *accept)
{
	while (*s)
	{
		for (char *p = accept; *p; p++)
	{
		if (*s == *p)
		{
			return (s);
		}
	}
		s++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     291       `
#include <string.h>
#include "main.h"

/**
* _strstr - locate a character in a string
* @s: pointer to the string s to be searched
* @c: pointer to character begin searched for
*
* Return: pointer to the first positon of the c
*/

char *_strstr(char *s, char *c)
{
	return (strstr(s, c));
}

6-abs.c/        0           0     0     644     214       `
# include "main.h"
/**
*_abs - computes the absolutevalue of an integer
*@n: the int to check
*
*Return: the absolute value of int
*/
int _abs(int n)
{
	if (n < 0)
	{
		return (-n);
	}
	else
	{
		return (n);
	}
}

9-strcpy.c/     0           0     0     644     281       `
#include "main.h"
/**
*char *_strcpy - a function that copies the string pointed to src
*@dest: copy to
*@src: copy from
*main - void
*Return: string
*/
char *_strcpy(char *dest, char *src)
{
	char *p = dest;

	while (*src)
	{
		*p++ = *src++;
	}

	*p = '\0';

	return (dest);
}



main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
